// Mocks generated by Mockito 5.3.2 from annotations
// in nytfeed/test/feed/feed_view_model_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:nytfeed/model/app_mode.dart' as _i6;
import 'package:nytfeed/model/article.dart' as _i5;
import 'package:nytfeed/model/list_part.dart' as _i2;
import 'package:nytfeed/usecases/load_and_cache_articles.dart' as _i3;
import 'package:nytfeed/usecases/load_and_cache_images.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeListPart_0<T> extends _i1.SmartFake implements _i2.ListPart<T> {
  _FakeListPart_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUri_1 extends _i1.SmartFake implements Uri {
  _FakeUri_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LoadAndCacheArticles].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoadAndCacheArticles extends _i1.Mock
    implements _i3.LoadAndCacheArticles {
  @override
  _i4.Future<_i2.ListPart<_i5.Article>> getArticles(
    _i6.AppMode? mode,
    int? offset,
    int? limit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getArticles,
          [
            mode,
            offset,
            limit,
          ],
        ),
        returnValue: _i4.Future<_i2.ListPart<_i5.Article>>.value(
            _FakeListPart_0<_i5.Article>(
          this,
          Invocation.method(
            #getArticles,
            [
              mode,
              offset,
              limit,
            ],
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.ListPart<_i5.Article>>.value(
            _FakeListPart_0<_i5.Article>(
          this,
          Invocation.method(
            #getArticles,
            [
              mode,
              offset,
              limit,
            ],
          ),
        )),
      ) as _i4.Future<_i2.ListPart<_i5.Article>>);
}

/// A class which mocks [LoadAndCacheImages].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoadAndCacheImages extends _i1.Mock
    implements _i7.LoadAndCacheImages {
  @override
  _i4.Future<Uri> getImage(
    _i6.AppMode? mode,
    Uri? remoteUri,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getImage,
          [
            mode,
            remoteUri,
          ],
        ),
        returnValue: _i4.Future<Uri>.value(_FakeUri_1(
          this,
          Invocation.method(
            #getImage,
            [
              mode,
              remoteUri,
            ],
          ),
        )),
        returnValueForMissingStub: _i4.Future<Uri>.value(_FakeUri_1(
          this,
          Invocation.method(
            #getImage,
            [
              mode,
              remoteUri,
            ],
          ),
        )),
      ) as _i4.Future<Uri>);
}
