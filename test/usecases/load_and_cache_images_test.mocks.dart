// Mocks generated by Mockito 5.3.2 from annotations
// in nytfeed/test/usecases/load_and_cache_images_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:typed_data' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:nytfeed/data/file_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUri_0 extends _i1.SmartFake implements Uri {
  _FakeUri_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FileService].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileService extends _i1.Mock implements _i2.FileService {
  @override
  _i3.Future<_i4.Uint8List> load(Uri? uri) => (super.noSuchMethod(
        Invocation.method(
          #load,
          [uri],
        ),
        returnValue: _i3.Future<_i4.Uint8List>.value(_i4.Uint8List(0)),
        returnValueForMissingStub:
            _i3.Future<_i4.Uint8List>.value(_i4.Uint8List(0)),
      ) as _i3.Future<_i4.Uint8List>);
  @override
  _i3.Future<void> save(
    Uri? uri,
    _i4.Uint8List? data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #save,
          [
            uri,
            data,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<Uri> getCacheDir() => (super.noSuchMethod(
        Invocation.method(
          #getCacheDir,
          [],
        ),
        returnValue: _i3.Future<Uri>.value(_FakeUri_0(
          this,
          Invocation.method(
            #getCacheDir,
            [],
          ),
        )),
        returnValueForMissingStub: _i3.Future<Uri>.value(_FakeUri_0(
          this,
          Invocation.method(
            #getCacheDir,
            [],
          ),
        )),
      ) as _i3.Future<Uri>);
  @override
  _i3.Future<bool> isExists(Uri? uri) => (super.noSuchMethod(
        Invocation.method(
          #isExists,
          [uri],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}
